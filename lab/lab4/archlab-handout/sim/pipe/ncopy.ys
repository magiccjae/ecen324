
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
# Include your name and ID here.
# Jae Lee  jhl48 
# Describe how and why you modified the baseline code.
#  I first implemented IIADDL within the HCL file and this removed an instruction through each iteration. 
#  The irmovl instruction is no longer needed and I removed them.
#  I applied loop unrolling by a factor of four. 
#  Through each loop iteration I copied 4 array elements from source to destination, decreasing the number of iteration. 
#  This introduced the special cases in which it was necessary to check the last 1, 2, or 3 elements respectively. 
#  I went through these elements one at a time since the array could be arbitrarily large and it is impossible to know whether to 
#  loop once, twice, or three times more after some number divisible by four have been looped through. 

##################################################################
# Do not modify this portion
# Function prologue.
ncopy:  pushl %ebp    # Save old frame pointer
  rrmovl %esp,%ebp  # Set up new frame pointer
  pushl %esi    # Save callee-save regs
  pushl %ebx
  pushl %edi
  mrmovl 8(%ebp),%ebx  # src
  mrmovl 16(%ebp),%edx  # len
  mrmovl 12(%ebp),%ecx  # dst

##################################################################
	# You can modify this portion
	  # Loop header
	  xorl %eax,%eax    # count = 0;
	  andl %edx, %edx
	  jle Done
	  iaddl $-4, %edx       # len = len - 4 
	  jl endElems
	unRolledLoop:  

	  mrmovl (%ebx), %esi     # read val from src[0] or multiple
	  mrmovl 4(%ebx), %edi   # read val from src[1] or multiple
	  rmmovl %esi, (%ecx)     # store src[0] to dest[0] or multiple
	  andl %esi, %esi       # check src[0] > 0 
	  jle Npos1         # if so, goto Npos1:
	  iaddl $1, %eax       # count++

	Npos1:  

	  rmmovl %edi, 4(%ecx)    #store src[1] in dest[1] or multiple
	  andl %edi, %edi        #check src[1] > 0 
	  jle Npos2          #if not get the next element
	  iaddl $1, %eax        #count++
	  
	Npos2:
	  mrmovl 8(%ebx), %esi    #read val from src[2] or multiple
	  mrmovl 12(%ebx), %edi    #read val from src[3] or multiple
	  rmmovl %esi, 8(%ecx)    #store val from src[2] in dest[2] or multiple
	  andl %esi, %esi        #check src[2] > 0 
	  jle Npos3          #if not get the next element
	  iaddl $1, %eax        #count++
	  
	Npos3:
	  
	  rmmovl %edi, 12(%ecx)  #store val froms src[3] in dest[3] or multiple
	  andl %edi, %edi      #check src[3] > 0 
	  jle Check        #if not get the next element
	  iaddl $1, %eax      #count++

	Check: 
	  iaddl $16 , %ebx    #get to the next four positions of src
	  iaddl $16 , %ecx     #get to the next four positions of dest
	  iaddl $-4, %edx      # len = len - 4
	  jge unRolledLoop    #if there is still 4|count loop again

	endElems:
	  iaddl $4, %edx       #add 4 back to get the actual len
	  
	  
	Rest1:
	  iaddl $-1 , %edx
	  jl Done          #short circuit
	  mrmovl (%ebx), %esi    # read val from src...
	  mrmovl 4(%ebx), %edi  # read val from src...
	  rmmovl %esi, (%ecx)
	  andl %esi, %esi
	  jle Rest2
	  iaddl $1, %eax
	  
	Rest2:
	  iaddl $-1 , %edx
	  jl Done  
	  rmmovl %edi, 4(%ecx)
	  andl %edi, %edi
	  jle Rest3
	  iaddl $1, %eax

	Rest3:
	  iaddl $-1 , %edx
	  jl Done
	  mrmovl 8(%ebx), %esi  # read val from src...
	  rmmovl %esi, 8(%ecx)
	  andl %esi, %esi
	  jle Done
	  iaddl $1, %eax  


  
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
  popl %edi               # Restore callee-save registers
  popl %ebx
  popl %esi
  rrmovl %ebp, %esp
  popl %ebp
  ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */

